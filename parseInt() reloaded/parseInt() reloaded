using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Linq;
public class Parser
{
    static int SplitCase_2(string s)
        {
            string[] separated = s.Split("-");
            var answer = (int)SimpleNumbers.Parse(typeof(SimpleNumbers), separated[0]) +
                         (int)SimpleNumbers.Parse(typeof(SimpleNumbers), separated[1]);
            return answer;
        }
 
        public static int ParseInt(string s)
        {
            s = s.Replace(" and", "").Replace(" - ", "-");

            int split = s.Split(" ").Count();
            int _split = s.Split("-").Count();
            int answer = 0;
            
            // twenty-two
            if (_split == 2 && split < 2)
            {
                return SplitCase_2(s);
            }
            // one thousand thirteen || six thousand nine hundred seventy-one || twenty-one thousand nine hundred seventy-one(thirteen)
            // two hundred twenty-six thousand three hundred ninety-nine || four hundred twenty-six thousand
            if (split >= 2 && (s.Contains("thousand") || s.Contains("hundred") || s.Contains("million")))
            {
                string[] separated = s.Split(" ");
                for (int i = 0; i < separated.Count() - 1;)
                {
                    if (s.Contains("thousand"))
                    {
                        if (separated[i].Contains('-'))
                        {
                            if (separated[i + 1] == "thousand")
                            {
                                answer = (answer + SplitCase_2(separated[i])) * (int)MultiplicateNumber.Parse(typeof(MultiplicateNumber), separated[i + 1]);
                                i += 2;
                            }
                            else
                            {
                                answer = answer + SplitCase_2(separated[i]) * (int)MultiplicateNumber.Parse(typeof(MultiplicateNumber), separated[i + 1]);
                                i += 2;
                            }
                        }
                        else
                        {
                            if (separated[i+1] == "thousand")
                            {
                                answer = (answer + (int)SimpleNumbers.Parse(typeof(SimpleNumbers), separated[i])) * (int)MultiplicateNumber.Parse(typeof(MultiplicateNumber), separated[i + 1]);
                                i += 2;
                            }
                            else if (separated[i] == "thousand")
                            {
                                answer = answer * (int)MultiplicateNumber.Parse(typeof(MultiplicateNumber), separated[i]);
                                i += 2;
                            }
                            else
                            {
                                answer = answer + (int)SimpleNumbers.Parse(typeof(SimpleNumbers), separated[i]) * (int)MultiplicateNumber.Parse(typeof(MultiplicateNumber), separated[i + 1]);
                                i += 2;
                            }
                        }
                    }
                    else
                    {
                        if (separated[i].Contains('-'))
                        {
                            answer = answer + SplitCase_2(separated[i]) * (int)MultiplicateNumber.Parse(typeof(MultiplicateNumber), separated[i + 1]);
                            i += 2;
                        }
                        else
                        {
                            answer = answer + (int)SimpleNumbers.Parse(typeof(SimpleNumbers), separated[i]) * (int)MultiplicateNumber.Parse(typeof(MultiplicateNumber), separated[i + 1]);
                            i += 2;
                        }
                    }
                    
                }
                if (separated.Last().Contains('-'))
                {
                    answer = answer + SplitCase_2(separated.Last());
                }
                // seven hundred thousand??two hundred three thousand
                // Простое число на конце
                else if (!separated.Last().Contains("thousand") && !separated.Last().Contains("hundred") && !separated.Last().Contains("million"))
                {
                    answer = answer + (int)SimpleNumbers.Parse(typeof(SimpleNumbers), separated.Last());
                }
                else if (separated.Last().Contains("thousand") && split % 2 != 0)
                {
                    answer = answer * (int)MultiplicateNumber.Parse(typeof(MultiplicateNumber), separated.Last());
                }
                else if (separated.Last().Contains("hundred") && split % 2 != 0)
                {
                    answer = answer + (int)SimpleNumbers.Parse(typeof(SimpleNumbers), separated[separated.Length-2]) * (int)MultiplicateNumber.Parse(typeof(MultiplicateNumber), separated.Last());
                }
            }
            // twenty 
            if (split == 1)
            {
                answer = (int)SimpleNumbers.Parse(typeof(SimpleNumbers), s);
            }
            return answer;
        }
}
enum SimpleNumbers
    {
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9,
        zero = 0,
        ten =10,
        eleven = 11,
        twelve = 12,
        thirteen = 13,
        fourteen = 14,
        fifteen = 15,
        sixteen = 16,
        seventeen = 17,
        eighteen = 18,
        nineteen = 19,
        twenty = 20,
        thirty = 30,
        forty = 40,
        fifty = 50,
        sixty = 60,
        seventy = 70,
        eighty = 80,
        ninety = 90,
    }
    enum MultiplicateNumber
    {
        hundred = 100,
        thousand = 1000,
        million = 1000000
    }
